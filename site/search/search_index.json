{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Testing docs! \u00b6 Testing if docs works. 1 2 3 4 ReactDOM . render ( < h1 > Hello , world !< /h1>, document . getElementById ( 'root' ) ); Link to another docs page Test Mermaid section \u00b6 Here is a mermaid graph! 1 2 3 4 5 graph TD; A-->B; A-->C; B-->D; C-->D;","title":"Testing docs!"},{"location":"#testing-docs","text":"Testing if docs works. 1 2 3 4 ReactDOM . render ( < h1 > Hello , world !< /h1>, document . getElementById ( 'root' ) ); Link to another docs page Test","title":"Testing docs!"},{"location":"#mermaid-section","text":"Here is a mermaid graph! 1 2 3 4 5 graph TD; A-->B; A-->C; B-->D; C-->D;","title":"Mermaid section"},{"location":"another_page/","text":"Another page \u00b6 This is another docs page. Heading 2 \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam commodo ex nisi, nec dictum sapien feugiat vitae. Pellentesque commodo efficitur est. Nulla id aliquam metus. Quisque nunc orci, ultricies non nisl aliquet, tristique tempor lorem. Phasellus euismod velit sit amet pulvinar ullamcorper. Duis accumsan ut dui sagittis faucibus. Suspendisse vitae sapien id urna maximus lacinia. Heading 3 \u00b6 Suspendisse nec cursus orci. Donec aliquam malesuada sem eu tempor. Ut volutpat libero tristique ligula eleifend pharetra. Praesent feugiat blandit ex a ultrices. Duis vestibulum varius mi ac facilisis. Nunc viverra interdum nisl, id dignissim arcu blandit a. Vivamus nibh odio, ullamcorper id nibh molestie, molestie lacinia purus. Nam mollis, enim eu molestie feugiat, odio mi congue elit, eget congue felis justo non ex. Pellentesque luctus faucibus nisi in pellentesque. Nullam cursus erat sed justo lacinia vehicula. Proin et dolor justo. Sed quis interdum diam. Sed auctor sed ex at aliquam. Curabitur mollis erat augue, ac fringilla libero cursus sed. Phasellus placerat congue bibendum. Sed maximus non orci vitae fringilla. Duis maximus dignissim quam a luctus. Another Heading 3 \u00b6 Phasellus et porta magna. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nam accumsan nisi eget massa molestie, sed pharetra urna fringilla. Curabitur laoreet pharetra quam. Sed faucibus nec felis quis tincidunt. Nulla a tempus tellus. Fusce quis mi mollis, cursus ex at, bibendum dui. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nullam eget aliquet tellus. Another Heading 2 \u00b6 Morbi imperdiet, elit ac vestibulum porttitor, justo nisl fermentum velit, sit amet scelerisque metus nisl eget ipsum. Nulla facilisi. Quisque feugiat id tortor in finibus. Pellentesque vitae metus sem. Sed luctus, augue ac pharetra pulvinar, tellus massa tincidunt urna, non tempor leo massa et dui. Donec ut fringilla ligula. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam tincidunt nibh consectetur mi ullamcorper posuere. In sagittis mi purus, in imperdiet ipsum aliquet eu. Maecenas aliquet euismod pulvinar. Nunc ut porta tellus. Donec sodales sem at nunc tincidunt, quis maximus metus faucibus. Vestibulum dictum porta nisi et tempor. Etiam ac tempor tortor. Nunc mattis tristique tincidunt. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.","title":"Another page"},{"location":"another_page/#another-page","text":"This is another docs page.","title":"Another page"},{"location":"another_page/#heading-2","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam commodo ex nisi, nec dictum sapien feugiat vitae. Pellentesque commodo efficitur est. Nulla id aliquam metus. Quisque nunc orci, ultricies non nisl aliquet, tristique tempor lorem. Phasellus euismod velit sit amet pulvinar ullamcorper. Duis accumsan ut dui sagittis faucibus. Suspendisse vitae sapien id urna maximus lacinia.","title":"Heading 2"},{"location":"another_page/#heading-3","text":"Suspendisse nec cursus orci. Donec aliquam malesuada sem eu tempor. Ut volutpat libero tristique ligula eleifend pharetra. Praesent feugiat blandit ex a ultrices. Duis vestibulum varius mi ac facilisis. Nunc viverra interdum nisl, id dignissim arcu blandit a. Vivamus nibh odio, ullamcorper id nibh molestie, molestie lacinia purus. Nam mollis, enim eu molestie feugiat, odio mi congue elit, eget congue felis justo non ex. Pellentesque luctus faucibus nisi in pellentesque. Nullam cursus erat sed justo lacinia vehicula. Proin et dolor justo. Sed quis interdum diam. Sed auctor sed ex at aliquam. Curabitur mollis erat augue, ac fringilla libero cursus sed. Phasellus placerat congue bibendum. Sed maximus non orci vitae fringilla. Duis maximus dignissim quam a luctus.","title":"Heading 3"},{"location":"another_page/#another-heading-3","text":"Phasellus et porta magna. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nam accumsan nisi eget massa molestie, sed pharetra urna fringilla. Curabitur laoreet pharetra quam. Sed faucibus nec felis quis tincidunt. Nulla a tempus tellus. Fusce quis mi mollis, cursus ex at, bibendum dui. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nullam eget aliquet tellus.","title":"Another Heading 3"},{"location":"another_page/#another-heading-2","text":"Morbi imperdiet, elit ac vestibulum porttitor, justo nisl fermentum velit, sit amet scelerisque metus nisl eget ipsum. Nulla facilisi. Quisque feugiat id tortor in finibus. Pellentesque vitae metus sem. Sed luctus, augue ac pharetra pulvinar, tellus massa tincidunt urna, non tempor leo massa et dui. Donec ut fringilla ligula. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam tincidunt nibh consectetur mi ullamcorper posuere. In sagittis mi purus, in imperdiet ipsum aliquet eu. Maecenas aliquet euismod pulvinar. Nunc ut porta tellus. Donec sodales sem at nunc tincidunt, quis maximus metus faucibus. Vestibulum dictum porta nisi et tempor. Etiam ac tempor tortor. Nunc mattis tristique tincidunt. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.","title":"Another Heading 2"},{"location":"test/","text":"Test page \u00b6 1 2 3 if __name__ == '__main__' : main ()","title":"Test"},{"location":"test/#test-page","text":"1 2 3 if __name__ == '__main__' : main ()","title":"Test page"},{"location":"yet_another_page/","text":"Yet another page \u00b6 Heading 2 of yet another page \u00b6 Link to a heading in another page . Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu","title":"Yet another page"},{"location":"yet_another_page/#yet-another-page","text":"","title":"Yet another page"},{"location":"yet_another_page/#heading-2-of-yet-another-page","text":"Link to a heading in another page . Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu","title":"Heading 2 of yet another page"},{"location":"features/abbreviations/","text":"Abbreviations \u00b6 To use abbreviations in your markdown, use the following format. 1 2 3 4 The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium the markdown-snippet above will be rendered as: 1 2 < p > The < abbr title = \"Hyper Text Markup Language\" > HTML </ abbr > specification is maintained by the < abbr title = \"World Wide Web Consortium\" > W3C </ abbr > . </ p > Read more about the python markdown abbreviations extension","title":"Abbreviations"},{"location":"features/abbreviations/#abbreviations","text":"To use abbreviations in your markdown, use the following format. 1 2 3 4 The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium the markdown-snippet above will be rendered as: 1 2 < p > The < abbr title = \"Hyper Text Markup Language\" > HTML </ abbr > specification is maintained by the < abbr title = \"World Wide Web Consortium\" > W3C </ abbr > . </ p > Read more about the python markdown abbreviations extension","title":"Abbreviations"},{"location":"features/call-outs/","text":"Notes, tips, info, and warnings \u00b6 TechDocs supports Admonition extensions . These extensions let you create separate notifications/call-outs in your documentation. Syntax \u00b6 To create a notification, use !!!, add a notification title (Warning, Tip, Note, etc.), and indent the first line of the text with 4 spaces. Here's an example: 1 2 3 4 !!! Note This creates a notification/call-out block in your text. The result is not shown in your editor. Techdocs styles this during the build. Note that if you use prettier or perform other code formatting on markdown at save-time or commit-time, indentation may be lost and your notifications will lose their formatting. If you encounter this, you may want to configure your code formatter to ignore markdown files or ignore the /docs folder. If you use prettier, you could wrap your call-outs like the following: 1 2 3 4 <!-- prettier-ignore-start --> !!! Note The comments above and below ensure prettier ignores this. <!-- prettier-ignore-end --> Usage and types \u00b6 Use call-outs/notifications sparingly. The text should be concise and contain 1-3 sentences at most. If you use a lot of call-outs, or if a notification is very long, put that information into its own section. Technical writing supports 4 notification types. See below for descriptions and guidance on how to use each one. Note \u00b6 A note is a mild warning. It alerts the reader to something important, but not catastrophic. Note The information in a note is optional. It tells the reader to pay attention because something bad may or may not happen if they ignore a note. Tip \u00b6 A tip provides the reader with some type of helpful workflow, steps, or process information. Nothing bad should happen if the reader ignores a tip. Tip The information in a tip is optional. Use it to help make the reader's life easier if they pay attention to it. But, they can keep doing things the hard way if they want to. Info \u00b6 An info call-out provides general information, background, or context. It's similar to a tip but shouldn't include procedure or process help like that notification type. Info The information in an info call-out is optional. Ignoring it should not affect workflow or cause a problem. However, reading it may put someone on the path to enlightenment. Warning \u00b6 A warning contains critical information. It conveys a sense of urgency and indicates that something awful will happen if the reader fails to pay attention to your message. This is the most dire, alarming notification you can put in your documentation. Warning The information in a warning is a hard requirement. Ignoring a warning collapses the time-space continuum and we cease to exist. Either that or someone on PagerDuty will have to deal with it.","title":"Notes, tips, info, and warnings"},{"location":"features/call-outs/#notes-tips-info-and-warnings","text":"TechDocs supports Admonition extensions . These extensions let you create separate notifications/call-outs in your documentation.","title":"Notes, tips, info, and warnings"},{"location":"features/call-outs/#syntax","text":"To create a notification, use !!!, add a notification title (Warning, Tip, Note, etc.), and indent the first line of the text with 4 spaces. Here's an example: 1 2 3 4 !!! Note This creates a notification/call-out block in your text. The result is not shown in your editor. Techdocs styles this during the build. Note that if you use prettier or perform other code formatting on markdown at save-time or commit-time, indentation may be lost and your notifications will lose their formatting. If you encounter this, you may want to configure your code formatter to ignore markdown files or ignore the /docs folder. If you use prettier, you could wrap your call-outs like the following: 1 2 3 4 <!-- prettier-ignore-start --> !!! Note The comments above and below ensure prettier ignores this. <!-- prettier-ignore-end -->","title":"Syntax"},{"location":"features/call-outs/#usage-and-types","text":"Use call-outs/notifications sparingly. The text should be concise and contain 1-3 sentences at most. If you use a lot of call-outs, or if a notification is very long, put that information into its own section. Technical writing supports 4 notification types. See below for descriptions and guidance on how to use each one.","title":"Usage and types"},{"location":"features/call-outs/#note","text":"A note is a mild warning. It alerts the reader to something important, but not catastrophic. Note The information in a note is optional. It tells the reader to pay attention because something bad may or may not happen if they ignore a note.","title":"Note"},{"location":"features/call-outs/#tip","text":"A tip provides the reader with some type of helpful workflow, steps, or process information. Nothing bad should happen if the reader ignores a tip. Tip The information in a tip is optional. Use it to help make the reader's life easier if they pay attention to it. But, they can keep doing things the hard way if they want to.","title":"Tip"},{"location":"features/call-outs/#info","text":"An info call-out provides general information, background, or context. It's similar to a tip but shouldn't include procedure or process help like that notification type. Info The information in an info call-out is optional. Ignoring it should not affect workflow or cause a problem. However, reading it may put someone on the path to enlightenment.","title":"Info"},{"location":"features/call-outs/#warning","text":"A warning contains critical information. It conveys a sense of urgency and indicates that something awful will happen if the reader fails to pay attention to your message. This is the most dire, alarming notification you can put in your documentation. Warning The information in a warning is a hard requirement. Ignoring a warning collapses the time-space continuum and we cease to exist. Either that or someone on PagerDuty will have to deal with it.","title":"Warning"},{"location":"features/code-snippets/","text":"Code snippets \u00b6 To format code or text into its own distinct block, use triple backticks. This gives a nice grey box and puts the code in code format. Syntax highlighting is provided through the use of the Highlight extension. To use it add the code language after the opening backticks. The following languages are supported. Make sure the opening and closing backtick sequences are each at the start of a new line. 1 2 3 4 5 ```yaml the::real::deal : some_key : address_cmd : 'hostname -I | cut -d\" \" -f1' ``` 1 2 3 the::real::deal : some_key : address_cmd : 'hostname -I | cut -d\" \" -f1' For inline code and file names, fence with single backticks like `this` . Highlight lines in code snippet \u00b6 To highlight specific lines of your code snippet you can add hl_lines to it. 1 2 3 4 5 ```yaml hl_lines=\"1 3\" the::real::deal: some_key: address_cmd: 'hostname -I | cut -d\" \" -f1' ``` 1 2 3 the::real::deal : some_key : address_cmd : 'hostname -I | cut -d\" \" -f1'","title":"Code snippets"},{"location":"features/code-snippets/#code-snippets","text":"To format code or text into its own distinct block, use triple backticks. This gives a nice grey box and puts the code in code format. Syntax highlighting is provided through the use of the Highlight extension. To use it add the code language after the opening backticks. The following languages are supported. Make sure the opening and closing backtick sequences are each at the start of a new line. 1 2 3 4 5 ```yaml the::real::deal : some_key : address_cmd : 'hostname -I | cut -d\" \" -f1' ``` 1 2 3 the::real::deal : some_key : address_cmd : 'hostname -I | cut -d\" \" -f1' For inline code and file names, fence with single backticks like `this` .","title":"Code snippets"},{"location":"features/code-snippets/#highlight-lines-in-code-snippet","text":"To highlight specific lines of your code snippet you can add hl_lines to it. 1 2 3 4 5 ```yaml hl_lines=\"1 3\" the::real::deal: some_key: address_cmd: 'hostname -I | cut -d\" \" -f1' ``` 1 2 3 the::real::deal : some_key : address_cmd : 'hostname -I | cut -d\" \" -f1'","title":"Highlight lines in code snippet"},{"location":"features/dropdowns/","text":"Dropdowns \u00b6 For optional or additional information, you can use the Details extension to create dropdowns. This way, the content does not clutter your document while being available for curious readers. Use triple question marks followed by type, for example, info dropdown. ??? info dropdown \"Troubleshooting this step\" If you see the following error, or similar\u2026 Troubleshooting this step If you see the following error, or similar\u2026 Note The result is not shown in the wysiwyg view of your editor, it is constructed when the mkdocs build runs. For more info, see Details extension .","title":"Dropdowns"},{"location":"features/dropdowns/#dropdowns","text":"For optional or additional information, you can use the Details extension to create dropdowns. This way, the content does not clutter your document while being available for curious readers. Use triple question marks followed by type, for example, info dropdown. ??? info dropdown \"Troubleshooting this step\" If you see the following error, or similar\u2026 Troubleshooting this step If you see the following error, or similar\u2026 Note The result is not shown in the wysiwyg view of your editor, it is constructed when the mkdocs build runs. For more info, see Details extension .","title":"Dropdowns"},{"location":"features/file-downloads/","text":"File downloads \u00b6 For links in your documentation pointing to files (like PDF) that are stored within the docs/ folder you need to add a download attribute to the link definition in markdown like below 1 [Download PDF](./path/to/file.pdf){: download }","title":"File downloads"},{"location":"features/file-downloads/#file-downloads","text":"For links in your documentation pointing to files (like PDF) that are stored within the docs/ folder you need to add a download attribute to the link definition in markdown like below 1 [Download PDF](./path/to/file.pdf){: download }","title":"File downloads"},{"location":"features/footnotes/","text":"Footnotes \u00b6 Syntax: 1 2 3 4 5 6 7 Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] [ ^1 ]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. [ ^2 ]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Example: Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 Read more about the Python Markdown footnotes extension . Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"Footnotes"},{"location":"features/footnotes/#footnotes","text":"Syntax: 1 2 3 4 5 6 7 Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] [ ^1 ]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. [ ^2 ]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Example: Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 Read more about the Python Markdown footnotes extension . Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"Footnotes"},{"location":"features/graphviz/","text":"Graphviz \u00b6 You can use Graphviz definitions to render graphs inline. The supported graphviz commands are dot , neato , fdp , sfdp , twopi , and circo . For more information, see the official documentation . Example 1 2 3 4 5 6 7 8 {% dot attack_plan.svg digraph G { rankdir=LR Earth [peripheries=2] Mars Earth -> Mars } %} will render: G Earth Earth Mars Mars Earth->Mars","title":"Graphviz"},{"location":"features/graphviz/#graphviz","text":"You can use Graphviz definitions to render graphs inline. The supported graphviz commands are dot , neato , fdp , sfdp , twopi , and circo . For more information, see the official documentation . Example 1 2 3 4 5 6 7 8 {% dot attack_plan.svg digraph G { rankdir=LR Earth [peripheries=2] Mars Earth -> Mars } %} will render: G Earth Earth Mars Mars Earth->Mars","title":"Graphviz"},{"location":"features/grouping/","text":"Tabs \u00b6 TechDocs supports the PyMarkdown extensions that let you create tabs. Tabs group and organize content under clickable labels, horizontally across the page. You may want to use tabs to help save vertical space on a page, to make side-by-side comparisons, or to organize text or code in a way that conveys a sense of cause and effect. Basic syntax and example \u00b6 Start a tab with === followed by a quoted tab title and then the text or code associated with each tab. The syntax for a simple set of tabbed text looks like this: 1 2 3 4 5 6 7 8 === \"Tab 1\" Lorem ipsum dolor sit amet. === \"Tab 2\" Consectetur adipiscing elit, sed do eiusmod tempor. === \"Tab 3\" Ut enim ad minim veniam. When published, Backstage displays tabbed content like this: Tab 1 Tab 2 Tab 3 Tab 1, lorem ipsum dolor sit amet. Tab 2, consectetur adipiscing elit, sed do eiusmod tempor. Tab 3, ut enim ad minim veniam. Text and code example \u00b6 This example groups some plain text and a code fragment under 2 tabs. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 === \"Tab 1\" ```txt Plain text (.txt) formatted in a tab. Here's a second line of text. ``` === \"Tab 2\" ```xml XML code in a tab. <parent> <groupId> com.spotify </groupId> <artifactId> root </artifactId> <version> 106 </version> </parent> ``` When published, Backstage displays tabbed content like this: Tab 1 Tab 2 1 2 Plain text (.txt) formatted in a tab. Here's a second line of text. 1 2 3 4 5 6 XML code in a tab. <parent> <groupId> com.spotify </groupId> <artifactId> root </artifactId> <version> 106 </version> </parent> For more information and examples, refer to the PyMarkdown documentation linked above in the page introduction.","title":"Tabs"},{"location":"features/grouping/#tabs","text":"TechDocs supports the PyMarkdown extensions that let you create tabs. Tabs group and organize content under clickable labels, horizontally across the page. You may want to use tabs to help save vertical space on a page, to make side-by-side comparisons, or to organize text or code in a way that conveys a sense of cause and effect.","title":"Tabs"},{"location":"features/grouping/#basic-syntax-and-example","text":"Start a tab with === followed by a quoted tab title and then the text or code associated with each tab. The syntax for a simple set of tabbed text looks like this: 1 2 3 4 5 6 7 8 === \"Tab 1\" Lorem ipsum dolor sit amet. === \"Tab 2\" Consectetur adipiscing elit, sed do eiusmod tempor. === \"Tab 3\" Ut enim ad minim veniam. When published, Backstage displays tabbed content like this: Tab 1 Tab 2 Tab 3 Tab 1, lorem ipsum dolor sit amet. Tab 2, consectetur adipiscing elit, sed do eiusmod tempor. Tab 3, ut enim ad minim veniam.","title":"Basic syntax and example"},{"location":"features/grouping/#text-and-code-example","text":"This example groups some plain text and a code fragment under 2 tabs. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 === \"Tab 1\" ```txt Plain text (.txt) formatted in a tab. Here's a second line of text. ``` === \"Tab 2\" ```xml XML code in a tab. <parent> <groupId> com.spotify </groupId> <artifactId> root </artifactId> <version> 106 </version> </parent> ``` When published, Backstage displays tabbed content like this: Tab 1 Tab 2 1 2 Plain text (.txt) formatted in a tab. Here's a second line of text. 1 2 3 4 5 6 XML code in a tab. <parent> <groupId> com.spotify </groupId> <artifactId> root </artifactId> <version> 106 </version> </parent> For more information and examples, refer to the PyMarkdown documentation linked above in the page introduction.","title":"Text and code example"},{"location":"features/headings/","text":"Headings \u00b6 Use a Heading1 (i.e. a single # at the beginning of the line) tag at the top of each .md file. Do not use additional Heading1 tags in the same file. If you do, the page contents on the right hand side of your generated site will not appear.","title":"Headings"},{"location":"features/headings/#headings","text":"Use a Heading1 (i.e. a single # at the beginning of the line) tag at the top of each .md file. Do not use additional Heading1 tags in the same file. If you do, the page contents on the right hand side of your generated site will not appear.","title":"Headings"},{"location":"features/images/","text":"Images \u00b6 Note You cannot link to images outside of the root /docs folder. This is a Mkdocs limitation. You can move images to inside the /docs folder and use them inside of TechDocs as usual. Link to images in an img folder using a relative path, using forward slash. Make sure your img folder is placed inside the 'docs' folder. ![image](./img/image4.png) Tip You can resize your images through the use of the attr_list plugin, using the following syntax: ![image](./img/image4.png){: style=\"height:150px;width:150px\"}","title":"Images"},{"location":"features/images/#images","text":"Note You cannot link to images outside of the root /docs folder. This is a Mkdocs limitation. You can move images to inside the /docs folder and use them inside of TechDocs as usual. Link to images in an img folder using a relative path, using forward slash. Make sure your img folder is placed inside the 'docs' folder. ![image](./img/image4.png) Tip You can resize your images through the use of the attr_list plugin, using the following syntax: ![image](./img/image4.png){: style=\"height:150px;width:150px\"}","title":"Images"},{"location":"features/introduction/","text":"Writing your Markdown docs \u00b6 This section is intended to give you some tips about how to write your documentation in Markdown, both for consistency and so that it will work well with MkDocs which is used to build the documentation sites in Backstage. MkDocs uses Python Markdown to render Markdown documents. For general support on how to write your documentation, refer to the Spotify Technical Writing Guide . External resources \u00b6 Here is an MkDocs page on How to layout and write your Markdown source files Here is a GitHub Help page on Basic writing and formatting syntax Here you can find details on Python Markdown features and limitations Here are some examples of Markdown editors: * StackEdit * MacDown","title":"Intro to Formatting TechDocs"},{"location":"features/introduction/#writing-your-markdown-docs","text":"This section is intended to give you some tips about how to write your documentation in Markdown, both for consistency and so that it will work well with MkDocs which is used to build the documentation sites in Backstage. MkDocs uses Python Markdown to render Markdown documents. For general support on how to write your documentation, refer to the Spotify Technical Writing Guide .","title":"Writing your Markdown docs"},{"location":"features/introduction/#external-resources","text":"Here is an MkDocs page on How to layout and write your Markdown source files Here is a GitHub Help page on Basic writing and formatting syntax Here you can find details on Python Markdown features and limitations Here are some examples of Markdown editors: * StackEdit * MacDown","title":"External resources"},{"location":"features/linking/","text":"Linking \u00b6 When creating a link in markdown to other parts or sections of your documentation, you can use absolute or relative links. Example: Absolute link [Absolute link to Docs Home](https://backstage.spotify.net/docs/docs/) Absolute link to Docs Home Example: Relative link [Relative link to Docs Home](../../index.md) Relative link to Docs Home Example: Relative link to a heading [Relative link to \"TechDocs Home\" heading](../../index.md#techdocs-home) Relative link to \"TechDocs Home\" heading Tip You can also embed content from other doc sites on your page. See Embedding content for details.","title":"Linking"},{"location":"features/linking/#linking","text":"When creating a link in markdown to other parts or sections of your documentation, you can use absolute or relative links. Example: Absolute link [Absolute link to Docs Home](https://backstage.spotify.net/docs/docs/) Absolute link to Docs Home Example: Relative link [Relative link to Docs Home](../../index.md) Relative link to Docs Home Example: Relative link to a heading [Relative link to \"TechDocs Home\" heading](../../index.md#techdocs-home) Relative link to \"TechDocs Home\" heading Tip You can also embed content from other doc sites on your page. See Embedding content for details.","title":"Linking"},{"location":"features/list-format/","text":"List Formatting \u00b6 Start here for some basic tips about creating lists in Markdown. Just one important thing first: keep in mind that all lists must be preceded by an empty line. Numbered lists \u00b6 A numbered list (or ordered list) automatically numbers each list item. To create a numbered list, start each list item with 1. and let Markdown do the rest. Syntax: 1 2 3 1. Numbered item 1. Numbered item 1. Numbered item Example: Numbered item Numbered item Numbered item Bullet lists \u00b6 A bullet list (or unordered list) puts round marks in front of each list item. To create a bullet list, start each list item with - and let Markdown do the rest. Syntax: 1 2 3 - Bullet item - Bullet item - Bullet item Example: Bullet item Bullet item Bullet item Nested lists \u00b6 A nested list contains numbered or bulleted sub-lists. To nest a list, indent 4-spaces wherever you want to start the new list. Syntax: 1 2 3 4 5 1. Numbered item 1. Numbered item - Nested bullet, 4-space indent - Nested bullet, 4-space indent 1. Numbered item Example: Numbered item Numbered item - Nested bullet, 4-space indent - Nested bullet, 4-space indent Numbered item Aligning content in a list \u00b6 Sometimes, you may have to put a lot of information under a list item. When you need to add extra text, code, or images, indent 4-spaces to keep this content aligned with your list items. Text alignment \u00b6 Here's an example of aligning text in a list. Syntax: The 4-space indented line isn't aligned with the second bullet, but they will be aligned in the generated docs. 1 2 3 4 5 6 1. First item 1. Second item with aligned filler text. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur lacinia iaculis tellus eu porttitor. Sed ultricies arcu sapien, eget pharetra metus convallis eget. Morbi scelerisque quis orci viverra volutpat. Etiam condimentum ex imperdiet accumsan lobortis. Aenean luctus erat vel laoreet efficitur. 1. Third item Example: First item Second item with aligned filler text. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur lacinia iaculis tellus eu porttitor. Sed ultricies arcu sapien, eget pharetra metus convallis eget. Third item Images \u00b6 Here's an example of aligning images in a list: Syntax: Put a line break between your list items and the image. 1 2 3 4 5 6 - Bullet item - Bullet item ![ my_image ]( ../img/image4.png ) - Bullet item Example: Bullet item Bullet item Bullet item This works with numbered lists too. Numbered item Numbered item Numbered item Spacing \u00b6 A long list can look crowded. Add a hard return to your list to open it up and make it easier to read. Syntax: 1 2 3 4 - Bullet item <!--- Hard return adds padding between the bullets ---> - Bullet item - Bullet item Example: Bullet item Bullet item Bullet item Lists in documentation \u00b6 See the Lists section in the Spotify Technical Writing Handbook . It provides advice on how to use lists in your written work. Other resources \u00b6 An online search using the phrase \"lists in Markdown\" will return a lot of helpful sites and information. Here are a few you can try right now: GitHub Guide: Mastering Markdown Markdown Guide: Basic Syntax Commonmark: Interactive Markdown list tutorial","title":"List Formatting"},{"location":"features/list-format/#list-formatting","text":"Start here for some basic tips about creating lists in Markdown. Just one important thing first: keep in mind that all lists must be preceded by an empty line.","title":"List Formatting"},{"location":"features/list-format/#numbered-lists","text":"A numbered list (or ordered list) automatically numbers each list item. To create a numbered list, start each list item with 1. and let Markdown do the rest. Syntax: 1 2 3 1. Numbered item 1. Numbered item 1. Numbered item Example: Numbered item Numbered item Numbered item","title":"Numbered lists"},{"location":"features/list-format/#bullet-lists","text":"A bullet list (or unordered list) puts round marks in front of each list item. To create a bullet list, start each list item with - and let Markdown do the rest. Syntax: 1 2 3 - Bullet item - Bullet item - Bullet item Example: Bullet item Bullet item Bullet item","title":"Bullet lists"},{"location":"features/list-format/#nested-lists","text":"A nested list contains numbered or bulleted sub-lists. To nest a list, indent 4-spaces wherever you want to start the new list. Syntax: 1 2 3 4 5 1. Numbered item 1. Numbered item - Nested bullet, 4-space indent - Nested bullet, 4-space indent 1. Numbered item Example: Numbered item Numbered item - Nested bullet, 4-space indent - Nested bullet, 4-space indent Numbered item","title":"Nested lists"},{"location":"features/list-format/#aligning-content-in-a-list","text":"Sometimes, you may have to put a lot of information under a list item. When you need to add extra text, code, or images, indent 4-spaces to keep this content aligned with your list items.","title":"Aligning content in a list"},{"location":"features/list-format/#text-alignment","text":"Here's an example of aligning text in a list. Syntax: The 4-space indented line isn't aligned with the second bullet, but they will be aligned in the generated docs. 1 2 3 4 5 6 1. First item 1. Second item with aligned filler text. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur lacinia iaculis tellus eu porttitor. Sed ultricies arcu sapien, eget pharetra metus convallis eget. Morbi scelerisque quis orci viverra volutpat. Etiam condimentum ex imperdiet accumsan lobortis. Aenean luctus erat vel laoreet efficitur. 1. Third item Example: First item Second item with aligned filler text. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur lacinia iaculis tellus eu porttitor. Sed ultricies arcu sapien, eget pharetra metus convallis eget. Third item","title":"Text alignment"},{"location":"features/list-format/#images","text":"Here's an example of aligning images in a list: Syntax: Put a line break between your list items and the image. 1 2 3 4 5 6 - Bullet item - Bullet item ![ my_image ]( ../img/image4.png ) - Bullet item Example: Bullet item Bullet item Bullet item This works with numbered lists too. Numbered item Numbered item Numbered item","title":"Images"},{"location":"features/list-format/#spacing","text":"A long list can look crowded. Add a hard return to your list to open it up and make it easier to read. Syntax: 1 2 3 4 - Bullet item <!--- Hard return adds padding between the bullets ---> - Bullet item - Bullet item Example: Bullet item Bullet item Bullet item","title":"Spacing"},{"location":"features/list-format/#lists-in-documentation","text":"See the Lists section in the Spotify Technical Writing Handbook . It provides advice on how to use lists in your written work.","title":"Lists in documentation"},{"location":"features/list-format/#other-resources","text":"An online search using the phrase \"lists in Markdown\" will return a lot of helpful sites and information. Here are a few you can try right now: GitHub Guide: Mastering Markdown Markdown Guide: Basic Syntax Commonmark: Interactive Markdown list tutorial","title":"Other resources"},{"location":"features/mermaid/","text":"Mermaid \u00b6 With mermaid, you can create a number of different charts and diagrams like sequence diagrams, gantt charts, user journeys and more. Syntax \u00b6 See the official documentation for syntax and more examples. Example \u00b6 The below markdown Example 1 2 3 4 5 6 7 8 9 10 11 12 ```mermaid sequenceDiagram autonumber Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` Will render 1 2 3 4 5 6 7 8 9 10 sequenceDiagram autonumber Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good!","title":"Mermaid"},{"location":"features/mermaid/#mermaid","text":"With mermaid, you can create a number of different charts and diagrams like sequence diagrams, gantt charts, user journeys and more.","title":"Mermaid"},{"location":"features/mermaid/#syntax","text":"See the official documentation for syntax and more examples.","title":"Syntax"},{"location":"features/mermaid/#example","text":"The below markdown Example 1 2 3 4 5 6 7 8 9 10 11 12 ```mermaid sequenceDiagram autonumber Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` Will render 1 2 3 4 5 6 7 8 9 10 sequenceDiagram autonumber Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good!","title":"Example"},{"location":"features/plantuml/","text":"PlantUML \u00b6 You can use PlantUML to render UML diagrams. For more information, see the official documentation . You can simply add a UML diagram as in the following markdown code block. 1 2 3 4 ```plantuml format=\"png\" classes=\"uml myDiagram\" alt=\"My super diagram placeholder\" title=\"My super diagram\" width=\"300px\" height=\"300px\" Goofy -> MickeyMouse: calls Goofy <-- MickeyMouse: responds ``` will render the following diagram: or as in the following markdown code block: 1 2 3 4 5 6 7 8 9 ```plantuml @startuml Alice -> Bob: Authentication Request Bob --> Alice: Authentication Response Alice -> Bob: Another authentication Request Alice <-- Bob: Another authentication Response @enduml ``` will render the following diagram: Note Supported values for format parameter are: png: HTML img tag with embedded png image svg: HTML img tag with embedded svg image (links are not navigable) svg_inline: HTML5 svg tag with inline svg image source (links are navigable, can be manipulated with CSS rules) txt: plain text diagrams. Including PlantUML files or URLs \u00b6 Including files can help structure your documentation and repository, and also allow reuse of diagrams. If you want to include diagrams from another location in your docs repository you can use the !include directive. Given a file located at docs/diagrams/diagram.puml with the following contents: 1 2 3 4 @startuml Alice -> Bob: Authentication Request return @enduml It can be included in any page with: 1 2 3 ```plantuml !include docs/diagrams/diagram.puml ``` This will render: See the official documentation on including files and URLs for more information, for example how to reuse individual components in multiple diagrams. Note Note that the PlantUML plugin and preprocessor is run from the root of the repository, meaning the docs/ folder needs to be included in the !include path. C4 model \u00b6 If you are using the C4 model for visualizing your software architecture you might want to use C4-PlantUML bindings to render diagrams in the domain language and standardize C4 formatting: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ```plantuml format=\"svg\" @startuml Basic Sample !includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/v2.0.1/C4_Container.puml Person(admin, \"Administrator\") System_Boundary(c1, \"Sample System\") { Container(web_app, \"Web Application\", \"C#, ASP.NET Core 2.1 MVC\", \"Allows users to compare multiple Twitter timelines\") } System(twitter, \"Twitter\") Rel(admin, web_app, \"Uses\", \"HTTPS\") Rel(web_app, twitter, \"Gets tweets from\", \"HTTPS\") @enduml ```","title":"PlantUML"},{"location":"features/plantuml/#plantuml","text":"You can use PlantUML to render UML diagrams. For more information, see the official documentation . You can simply add a UML diagram as in the following markdown code block. 1 2 3 4 ```plantuml format=\"png\" classes=\"uml myDiagram\" alt=\"My super diagram placeholder\" title=\"My super diagram\" width=\"300px\" height=\"300px\" Goofy -> MickeyMouse: calls Goofy <-- MickeyMouse: responds ``` will render the following diagram: or as in the following markdown code block: 1 2 3 4 5 6 7 8 9 ```plantuml @startuml Alice -> Bob: Authentication Request Bob --> Alice: Authentication Response Alice -> Bob: Another authentication Request Alice <-- Bob: Another authentication Response @enduml ``` will render the following diagram: Note Supported values for format parameter are: png: HTML img tag with embedded png image svg: HTML img tag with embedded svg image (links are not navigable) svg_inline: HTML5 svg tag with inline svg image source (links are navigable, can be manipulated with CSS rules) txt: plain text diagrams.","title":"PlantUML"},{"location":"features/plantuml/#including-plantuml-files-or-urls","text":"Including files can help structure your documentation and repository, and also allow reuse of diagrams. If you want to include diagrams from another location in your docs repository you can use the !include directive. Given a file located at docs/diagrams/diagram.puml with the following contents: 1 2 3 4 @startuml Alice -> Bob: Authentication Request return @enduml It can be included in any page with: 1 2 3 ```plantuml !include docs/diagrams/diagram.puml ``` This will render: See the official documentation on including files and URLs for more information, for example how to reuse individual components in multiple diagrams. Note Note that the PlantUML plugin and preprocessor is run from the root of the repository, meaning the docs/ folder needs to be included in the !include path.","title":"Including PlantUML files or URLs"},{"location":"features/plantuml/#c4-model","text":"If you are using the C4 model for visualizing your software architecture you might want to use C4-PlantUML bindings to render diagrams in the domain language and standardize C4 formatting: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ```plantuml format=\"svg\" @startuml Basic Sample !includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/v2.0.1/C4_Container.puml Person(admin, \"Administrator\") System_Boundary(c1, \"Sample System\") { Container(web_app, \"Web Application\", \"C#, ASP.NET Core 2.1 MVC\", \"Allows users to compare multiple Twitter timelines\") } System(twitter, \"Twitter\") Rel(admin, web_app, \"Uses\", \"HTTPS\") Rel(web_app, twitter, \"Gets tweets from\", \"HTTPS\") @enduml ```","title":"C4 model"},{"location":"features/tables/","text":"Tables \u00b6 The table syntax is rather simple and is generally only useful for simple tabular data. Note that table cells cannot contain any block level elements and cannot contain multiple lines of text. They can, however, include inline Markdown. Additionally, a table must be surrounded by blank lines, that is, there must be a blank line before and after the table. First Header | Second Header | Third Header ------------ | ------------- | ------------ Content Cell | Content Cell | Content Cell Content Cell | Content Cell | Content Cell First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell","title":"Tables"},{"location":"features/tables/#tables","text":"The table syntax is rather simple and is generally only useful for simple tabular data. Note that table cells cannot contain any block level elements and cannot contain multiple lines of text. They can, however, include inline Markdown. Additionally, a table must be surrounded by blank lines, that is, there must be a blank line before and after the table. First Header | Second Header | Third Header ------------ | ------------- | ------------ Content Cell | Content Cell | Content Cell Content Cell | Content Cell | Content Cell First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell","title":"Tables"},{"location":"features/variables/","text":"Variables \u00b6 For variables, use angled brackets. Use code fences. /home/<username>","title":"Variables"},{"location":"features/variables/#variables","text":"For variables, use angled brackets. Use code fences. /home/<username>","title":"Variables"}]}